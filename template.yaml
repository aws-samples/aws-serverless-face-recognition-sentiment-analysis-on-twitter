AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
    "Twitter Rekognition Demo - Lambdas \n"

Parameters:
  CollectionId:  
    Default: twitter-selfie
    Type: String

Globals:
  Function:
    AutoPublishAlias: live
    Handler: index.handler
    MemorySize: 256
    Runtime: python3.7
    Timeout: 120
    Tracing: Active
    Layers:
      - !Ref CoreLayer

Resources:

  Bucket:
    Type: AWS::S3::Bucket
    Properties:
      LifecycleConfiguration:
        Rules:
          - Id: DeleteRecordsAfter2Days
            ExpirationInDays: 2
            Status: Enabled
            Prefix: "json-records"
          - Id: DeleteAthenaReportsAfter2Days
            ExpirationInDays: 2
            Status: Enabled
            Prefix: "twitter-ath-results"
          - Id: DeleteParquetAfter2Days
            ExpirationInDays: 2
            Status: Enabled
            Prefix: "parquet*"

  BucketParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: /twitter-demo/bucket
      Type: String
      Value: !Ref Bucket
      Description: Bucket Name

  DdbImageTable: 
    Type: AWS::DynamoDB::Table
    Properties: 
      AttributeDefinitions: 
        - 
          AttributeName: "img_url"
          AttributeType: "S"
      KeySchema: 
        - 
          AttributeName: "img_url"
          KeyType: "HASH"
      BillingMode: PAY_PER_REQUEST
      TimeToLiveSpecification:
        AttributeName: expire_at
        Enabled: True

  AccessLogs:
    Type: AWS::Logs::LogGroup

  HttpApi:
    Type: AWS::Serverless::HttpApi
    Properties:
      AccessLogSettings:
        DestinationArn: !GetAtt AccessLogs.Arn
        Format: $context.requestId $context.requestTime $context.path $context.status $context.responseLatency $context.integrationLatency
      DefaultRouteSettings:
        ThrottlingBurstLimit: 200
      FailOnWarnings: True
      CorsConfiguration: 
        AllowHeaders: 
          - "*"
        AllowMethods: 
          - GET
          - POST
        AllowOrigins: 
          - "*"

  TweetSource:
    Type: AWS::Serverless::Application
    Properties:
      Location:
        ApplicationId: arn:aws:serverlessrepo:us-east-1:077246666028:applications/aws-serverless-twitter-event-source
        SemanticVersion: 2.0.0
      Parameters:
        # Non-URL-encoded search text poller should use when querying Twitter Search API.
        #SearchText: '#serverless -filter:nativeretweets'
        SearchText: 'selfie'
        # Name of lambda function that should be invoked to process tweets. Note, this must be a function name and not a function ARN.
        TweetProcessorFunctionName: !Ref Parser
        # This app assumes API keys needed to use the Twitter API are stored as SecureStrings in SSM Parameter Store under the prefix
        # defined by this parameter. See the app README for details.
        #SSMParameterPrefix: twitter-event-source # Uncomment to override default value
        # Frequency in minutes to poll for more tweets.
        PollingFrequencyInMinutes: 10 # Uncomment to override default value
        # Max number of tweets to send to the TweetProcessor lambda function on each invocation.
        #BatchSize: 15 # Uncomment to override default value
        # If true, the app will remember the last tweet found and only invoke the tweet processor function for newer tweets.
        # If false, the app will be stateless and invoke the tweet processor function with all tweets found in each polling cycle.
        StreamModeEnabled: true # Uncomment to override default value

  CoreLayer:
      Type: AWS::Serverless::LayerVersion
      Properties:
        Description: requests awsxray PIL
        ContentUri: ./layers/layer.zip
        CompatibleRuntimes:
          - python3.8
          - python3.7
          - python3.6
        RetentionPolicy: Delete

  Parser:
    Type: AWS::Serverless::Function 
    Properties:
      CodeUri: ./lambdas/parser/
      Policies:
        - arn:aws:iam::aws:policy/AWSXrayWriteOnlyAccess
        - S3CrudPolicy:
            BucketName:
              !Ref Bucket 
        - StepFunctionsExecutionPolicy:
            StateMachineName:
              !GetAtt StateMachine.Name
        - DynamoDBCrudPolicy:
            TableName:
              !Ref DdbImageTable
        - SSMParameterReadPolicy:
            ParameterName: "twitter-demo*"
      Environment:
        Variables:
          StateMachineArn: !Ref StateMachine
          DdbImageTable: !Ref DdbImageTable

  AthenaQuery:
    Type: AWS::Serverless::Function 
    Properties:
      CodeUri: ./lambdas/athenaquery/
      Policies:
        - arn:aws:iam::aws:policy/AWSXrayWriteOnlyAccess
        - S3CrudPolicy:
            BucketName:
              !Ref Bucket 
        - arn:aws:iam::aws:policy/AmazonAthenaFullAccess
        - SSMParameterReadPolicy:
            ParameterName: "twitter-demo*"
      Environment:
        Variables:
          Bucket: !Ref Bucket

  GetImage:
    Type: AWS::Serverless::Function 
    Properties:
      CodeUri: ./lambdas/getimage/
      Events:
        ExplicitApi: # warning: creates a public endpoint
          Type: HttpApi
          Properties:
            ApiId: !Ref HttpApi
            Method: GET
            Path: /image
            TimeoutInMillis: 29000
            PayloadFormatVersion: "2.0"
            RouteSettings:
              ThrottlingBurstLimit: 100
      Policies:
        - arn:aws:iam::aws:policy/AWSXrayWriteOnlyAccess
        - SSMParameterReadPolicy:
            ParameterName: "twitter-demo*"
        - LambdaInvokePolicy:
            FunctionName:
              !Ref AthenaQuery
        - S3CrudPolicy:
            BucketName:
              !Ref Bucket 
        - arn:aws:iam::aws:policy/AmazonAthenaFullAccess
      Environment:
        Variables:
          Bucket: !Ref Bucket
          AthQueryLambdaName: !Ref AthenaQuery

  DelImage:
    Type: AWS::Serverless::Function 
    Properties:
      CodeUri: ./lambdas/delimage/
      Events:
        ExplicitApi: # warning: creates a public endpoint
          Type: HttpApi
          Properties:
            ApiId: !Ref HttpApi
            Method: POST
            Path: /delimage
            TimeoutInMillis: 29000
            PayloadFormatVersion: "2.0"
            RouteSettings:
              ThrottlingBurstLimit: 100
      Policies:
        - SSMParameterReadPolicy:
            ParameterName: "twitter-demo*"
        - arn:aws:iam::aws:policy/AWSXrayWriteOnlyAccess
        - S3CrudPolicy:
            BucketName:
              !Ref Bucket
      Environment:
        Variables:
          Bucket: !Ref Bucket

  Rekognition:
    Type: AWS::Serverless::Function 
    Properties:
      CodeUri: ./lambdas/rekognition/   
      Environment:
        Variables:
          Bucket: !Ref Bucket
          CollectionId: !Ref CollectionId     
      Policies:
        - S3CrudPolicy:
            BucketName:
              !Ref Bucket
        - SSMParameterReadPolicy:
            ParameterName: "twitter-demo*"
        - arn:aws:iam::aws:policy/AmazonRekognitionFullAccess
        - arn:aws:iam::aws:policy/AWSXrayWriteOnlyAccess

  ProcessFaces:
    Type: AWS::Serverless::Function 
    Properties:
      CodeUri: ./lambdas/processfaces/
      Environment:
        Variables:
          Bucket: !Ref Bucket
          CollectionId: !Ref CollectionId
      Policies:
        - arn:aws:iam::aws:policy/AWSXrayWriteOnlyAccess
        - SSMParameterReadPolicy:
            ParameterName: "twitter-demo*"
        - FirehoseCrudPolicy:
            DeliveryStreamName: "*"        
        - ComprehendBasicAccessPolicy: {}
        - S3CrudPolicy:
            BucketName:
              !Ref Bucket
        - RekognitionFacesManagementPolicy:
            CollectionId:
                !Ref CollectionId

  StateMachine:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      DefinitionString:
        !Sub
          - |-
            {
              "Comment": "Twitter selfie state machine",
              "StartAt": "Rekognition",
              "States": {
                "Rekognition": {
                  "Type": "Task",
                  "Resource": "${RunRekognitionArn}",
                  "Next": "RekErrorHandler"
                },
                "RekErrorHandler": {
                  "Type" : "Choice",
                  "Choices": [
                    {
                      "Variable": "$.result",
                      "StringEquals": "Succeed",
                      "Next": "ProcessFaces"
                    },
                    {
                      "Variable": "$.result",
                      "StringEquals": "Fail",
                      "Next": "FailState"
                    }
                  ],
                  "Default": "FailState"
                },
                "ProcessFaces": {
                  "Type": "Task",
                  "Resource": "${ProcessFacesArn}",
                  "Next": "FaceErrorHandler"
                },
                "FaceErrorHandler": {
                  "Type" : "Choice",
                  "Choices": [
                    {
                      "Variable": "$.result",
                      "StringEquals": "Succeed",
                      "Next": "SucceedState"
                    },
                    {
                      "Variable": "$.result",
                      "StringEquals": "Moderated",
                      "Next": "SucceedState"
                    },
                    {
                      "Variable": "$.result",
                      "StringEquals": "Fail",
                      "Next": "FailState"
                    }
                  ],
                  "Default": "FailState"
                },
                "FailState": {
                  "Type": "Fail",
                  "Error": "DefaultStateError",
                  "Cause": "No Matches!"
                },
                "SucceedState": {
                  "Type": "Succeed"
                }
              }
            }
          - ProcessFacesArn: !GetAtt ProcessFaces.Arn
            RunRekognitionArn: !GetAtt Rekognition.Arn 
      RoleArn: !GetAtt [ StatesExecutionRole, Arn ]

  StatesExecutionRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - !Sub states.${AWS::Region}.amazonaws.com
            Action: "sts:AssumeRole"
      Path: "/"
      Policies:
        - PolicyName: StatesExecutionPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "lambda:InvokeFunction"
                Resource: "*"

Outputs:
  Bucket:
      Value: !Ref Bucket
  DdbImageTable:
      Value: !Ref DdbImageTable
  AthenaQueryArn:
      Value: !GetAtt AthenaQuery.Arn
  ParserArn:
      Value: !GetAtt Parser.Arn
  GetImage:
      Value: !GetAtt GetImage.Arn
  HttpApiUrl:
      Description: URL of your API endpoint
      Value:
        Fn::Sub: 'https://${HttpApi}.execute-api.${AWS::Region}.${AWS::URLSuffix}/'
  StateMachineArn:
        Value: !Ref StateMachine
  StateMachineName:
      Value: !GetAtt StateMachine.Name
  RekognitionLambdaArn:
      Value: !GetAtt Rekognition.Arn
  ProcessFacesLambdaArn:
      Value: !GetAtt ProcessFaces.Arn
  CoreLayer:
      Value: !Ref CoreLayer
  HttpApiId:
    Description: Api id of HttpApi
    Value:
      Ref: HttpApi